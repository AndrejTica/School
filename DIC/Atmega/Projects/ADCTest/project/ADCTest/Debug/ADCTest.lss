
ADCTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  0080010a  0080010a  000002ba  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b6a  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d1  00000000  00000000  00000f16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000053b  00000000  00000000  000017e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  00001d24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000576  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001d3  00000000  00000000  00002386  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002559  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ec e1       	ldi	r30, 0x1C	; 28
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	aa 30       	cpi	r26, 0x0A	; 10
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	aa e0       	ldi	r26, 0x0A	; 10
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 30       	cpi	r26, 0x0E	; 14
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 b2 00 	call	0x164	; 0x164 <main>
  b2:	0c 94 0c 01 	jmp	0x218	; 0x218 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <initADC>:
}

void stopADC(){
	ADCSRA = 0;
	ADMUX = 0;
	ADCSRB = 0;
  ba:	ea e7       	ldi	r30, 0x7A	; 122
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	10 82       	st	Z, r1
  c0:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  c4:	ac e7       	ldi	r26, 0x7C	; 124
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	1c 92       	st	X, r1
  ca:	90 81       	ld	r25, Z
  cc:	6f 5f       	subi	r22, 0xFF	; 255
  ce:	69 2b       	or	r22, r25
  d0:	60 83       	st	Z, r22
  d2:	2c 91       	ld	r18, X
  d4:	30 e4       	ldi	r19, 0x40	; 64
  d6:	83 9f       	mul	r24, r19
  d8:	c0 01       	movw	r24, r0
  da:	11 24       	eor	r1, r1
  dc:	82 2b       	or	r24, r18
  de:	8c 93       	st	X, r24
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
  e6:	08 95       	ret

000000e8 <analogRead_FreeRunMode>:
  e8:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	98 2f       	mov	r25, r24
  f4:	88 27       	eor	r24, r24
  f6:	82 0f       	add	r24, r18
  f8:	91 1d       	adc	r25, r1
  fa:	08 95       	ret

000000fc <startADC_FreeRunMode>:
  fc:	ec e7       	ldi	r30, 0x7C	; 124
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 81       	ld	r25, Z
 102:	89 2b       	or	r24, r25
 104:	80 83       	st	Z, r24
 106:	ea e7       	ldi	r30, 0x7A	; 122
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 81       	ld	r24, Z
 10c:	80 62       	ori	r24, 0x20	; 32
 10e:	80 83       	st	Z, r24
 110:	80 81       	ld	r24, Z
 112:	80 64       	ori	r24, 0x40	; 64
 114:	80 83       	st	Z, r24
 116:	08 95       	ret

00000118 <__vector_24>:
}

ISR(ADC_vect){
 118:	1f 92       	push	r1
 11a:	0f 92       	push	r0
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	0f 92       	push	r0
 120:	11 24       	eor	r1, r1
 122:	2f 93       	push	r18
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	SMCR &= ~(1<<SE);
 12c:	83 b7       	in	r24, 0x33	; 51
 12e:	8e 7f       	andi	r24, 0xFE	; 254
 130:	83 bf       	out	0x33, r24	; 51
	uint16_t result = ADCL;
 132:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	result += ADCH<<8;
 136:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	*analogRead_addressVar = result;
 13a:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <__data_end>
 13e:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <__data_end+0x1>
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	98 2f       	mov	r25, r24
 146:	88 27       	eor	r24, r24
 148:	82 0f       	add	r24, r18
 14a:	91 1d       	adc	r25, r1
 14c:	91 83       	std	Z+1, r25	; 0x01
 14e:	80 83       	st	Z, r24
}
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	2f 91       	pop	r18
 15a:	0f 90       	pop	r0
 15c:	0f be       	out	0x3f, r0	; 63
 15e:	0f 90       	pop	r0
 160:	1f 90       	pop	r1
 162:	18 95       	reti

00000164 <main>:
	0b00100000	//9
	};

int main(void)
{
	initADC(ADC_RVOLTAGE_AVCC, ADC_P64);
 164:	65 e0       	ldi	r22, 0x05	; 5
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	0e 94 5d 00 	call	0xba	; 0xba <initADC>
	startADC_FreeRunMode(PA0);
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 7e 00 	call	0xfc	; 0xfc <startADC_FreeRunMode>
	DDRC = 0xFF;
 172:	8f ef       	ldi	r24, 0xFF	; 255
 174:	87 b9       	out	0x07, r24	; 7
		{
			PORTC = tabelle[1];
		}
		else if (a < 500)
		{
			PORTC = tabelle[0];
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	d1 e0       	ldi	r29, 0x01	; 1
{
	initADC(ADC_RVOLTAGE_AVCC, ADC_P64);
	startADC_FreeRunMode(PA0);
	DDRC = 0xFF;
	while(1){
		a = analogRead_FreeRunMode();
 17a:	0e 94 74 00 	call	0xe8	; 0xe8 <analogRead_FreeRunMode>
 17e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <a+0x1>
 182:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <a>
		if (a < 50)
 186:	82 33       	cpi	r24, 0x32	; 50
 188:	91 05       	cpc	r25, r1
 18a:	1c f4       	brge	.+6      	; 0x192 <main+0x2e>
		{
			PORTC = tabelle[9];
 18c:	89 85       	ldd	r24, Y+9	; 0x09
 18e:	88 b9       	out	0x08, r24	; 8
 190:	39 c0       	rjmp	.+114    	; 0x204 <main+0xa0>
		}
		else if (a < 100)
 192:	84 36       	cpi	r24, 0x64	; 100
 194:	91 05       	cpc	r25, r1
 196:	1c f4       	brge	.+6      	; 0x19e <main+0x3a>
		{
			PORTC = tabelle[8];
 198:	88 85       	ldd	r24, Y+8	; 0x08
 19a:	88 b9       	out	0x08, r24	; 8
 19c:	33 c0       	rjmp	.+102    	; 0x204 <main+0xa0>
		}
		else if (a < 150)
 19e:	86 39       	cpi	r24, 0x96	; 150
 1a0:	91 05       	cpc	r25, r1
 1a2:	1c f4       	brge	.+6      	; 0x1aa <main+0x46>
		{
			PORTC = tabelle[7];
 1a4:	8f 81       	ldd	r24, Y+7	; 0x07
 1a6:	88 b9       	out	0x08, r24	; 8
 1a8:	2d c0       	rjmp	.+90     	; 0x204 <main+0xa0>
		}
		else if (a < 200)
 1aa:	88 3c       	cpi	r24, 0xC8	; 200
 1ac:	91 05       	cpc	r25, r1
 1ae:	1c f4       	brge	.+6      	; 0x1b6 <main+0x52>
		{
			PORTC = tabelle[6];
 1b0:	8e 81       	ldd	r24, Y+6	; 0x06
 1b2:	88 b9       	out	0x08, r24	; 8
 1b4:	27 c0       	rjmp	.+78     	; 0x204 <main+0xa0>
		}
		else if (a < 250)
 1b6:	8a 3f       	cpi	r24, 0xFA	; 250
 1b8:	91 05       	cpc	r25, r1
 1ba:	1c f4       	brge	.+6      	; 0x1c2 <main+0x5e>
		{
			PORTC = tabelle[5];
 1bc:	8d 81       	ldd	r24, Y+5	; 0x05
 1be:	88 b9       	out	0x08, r24	; 8
 1c0:	21 c0       	rjmp	.+66     	; 0x204 <main+0xa0>
		}
		else if (a < 300)
 1c2:	8c 32       	cpi	r24, 0x2C	; 44
 1c4:	21 e0       	ldi	r18, 0x01	; 1
 1c6:	92 07       	cpc	r25, r18
 1c8:	1c f4       	brge	.+6      	; 0x1d0 <main+0x6c>
		{
			PORTC = tabelle[4];
 1ca:	8c 81       	ldd	r24, Y+4	; 0x04
 1cc:	88 b9       	out	0x08, r24	; 8
 1ce:	1a c0       	rjmp	.+52     	; 0x204 <main+0xa0>
		}
		else if (a < 350)
 1d0:	8e 35       	cpi	r24, 0x5E	; 94
 1d2:	21 e0       	ldi	r18, 0x01	; 1
 1d4:	92 07       	cpc	r25, r18
 1d6:	1c f4       	brge	.+6      	; 0x1de <main+0x7a>
		{
			PORTC = tabelle[3];
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
 1da:	88 b9       	out	0x08, r24	; 8
 1dc:	13 c0       	rjmp	.+38     	; 0x204 <main+0xa0>
		}
		else if (a < 400)
 1de:	80 39       	cpi	r24, 0x90	; 144
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	92 07       	cpc	r25, r18
 1e4:	1c f4       	brge	.+6      	; 0x1ec <main+0x88>
		{
			PORTC = tabelle[2];
 1e6:	8a 81       	ldd	r24, Y+2	; 0x02
 1e8:	88 b9       	out	0x08, r24	; 8
 1ea:	0c c0       	rjmp	.+24     	; 0x204 <main+0xa0>
		}
		else if (a < 450)
 1ec:	82 3c       	cpi	r24, 0xC2	; 194
 1ee:	21 e0       	ldi	r18, 0x01	; 1
 1f0:	92 07       	cpc	r25, r18
 1f2:	1c f4       	brge	.+6      	; 0x1fa <main+0x96>
		{
			PORTC = tabelle[1];
 1f4:	89 81       	ldd	r24, Y+1	; 0x01
 1f6:	88 b9       	out	0x08, r24	; 8
 1f8:	05 c0       	rjmp	.+10     	; 0x204 <main+0xa0>
		}
		else if (a < 500)
 1fa:	84 3f       	cpi	r24, 0xF4	; 244
 1fc:	91 40       	sbci	r25, 0x01	; 1
 1fe:	14 f4       	brge	.+4      	; 0x204 <main+0xa0>
		{
			PORTC = tabelle[0];
 200:	88 81       	ld	r24, Y
 202:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	99 e6       	ldi	r25, 0x69	; 105
 208:	28 e1       	ldi	r18, 0x18	; 24
 20a:	81 50       	subi	r24, 0x01	; 1
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	20 40       	sbci	r18, 0x00	; 0
 210:	e1 f7       	brne	.-8      	; 0x20a <main+0xa6>
 212:	00 c0       	rjmp	.+0      	; 0x214 <main+0xb0>
 214:	00 00       	nop
 216:	b1 cf       	rjmp	.-158    	; 0x17a <main+0x16>

00000218 <_exit>:
 218:	f8 94       	cli

0000021a <__stop_program>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <__stop_program>
