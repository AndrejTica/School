
CompMatchInt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000008  00800060  00800060  000001ac  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005f  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000d6  00000000  00000000  0000022b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000006c  00000000  00000000  00000301  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000de  00000000  00000000  0000036d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000cf  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
int main()
{
 
   //Timer 0 konfigurieren
 
   TCCR0 =(1<<WGM01) |(1<<CS01);
  7c:	8a e0       	ldi	r24, 0x0A	; 10
  7e:	83 bf       	out	0x33, r24	; 51
   OCR0=125;
  80:	8d e7       	ldi	r24, 0x7D	; 125
  82:	8c bf       	out	0x3c, r24	; 60
 
   //Compare Interrupt aktivieren
   TIMSK|=(1<<OCIE0);
  84:	89 b7       	in	r24, 0x39	; 57
  86:	82 60       	ori	r24, 0x02	; 2
  88:	89 bf       	out	0x39, r24	; 57
   //Globale Interrupts aktivieren
   sei();
  8a:	78 94       	sei
  8c:	ff cf       	rjmp	.-2      	; 0x8c <main+0x10>

0000008e <__vector_10>:
}
 
// Der Compare Interrupt Handler
// Wird aufgerufen wenn TCNT0 = 125
ISR (TIMER0_COMP_vect)
{
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	2f 93       	push	r18
  9a:	8f 93       	push	r24
  9c:	9f 93       	push	r25
   millisekunden++;
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	90 91 61 00 	lds	r25, 0x0061
  a6:	01 96       	adiw	r24, 0x01	; 1
  a8:	90 93 61 00 	sts	0x0061, r25
  ac:	80 93 60 00 	sts	0x0060, r24
   if(millisekunden==1000)
  b0:	80 91 60 00 	lds	r24, 0x0060
  b4:	90 91 61 00 	lds	r25, 0x0061
  b8:	88 5e       	subi	r24, 0xE8	; 232
  ba:	93 40       	sbci	r25, 0x03	; 3
  bc:	99 f5       	brne	.+102    	; 0x124 <__vector_10+0x96>
   {
      sekunde++;
  be:	80 91 62 00 	lds	r24, 0x0062
  c2:	90 91 63 00 	lds	r25, 0x0063
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	90 93 63 00 	sts	0x0063, r25
  cc:	80 93 62 00 	sts	0x0062, r24
      millisekunden=0;
  d0:	10 92 61 00 	sts	0x0061, r1
  d4:	10 92 60 00 	sts	0x0060, r1
      if(sekunde==60)
  d8:	80 91 62 00 	lds	r24, 0x0062
  dc:	90 91 63 00 	lds	r25, 0x0063
  e0:	cc 97       	sbiw	r24, 0x3c	; 60
  e2:	69 f4       	brne	.+26     	; 0xfe <__vector_10+0x70>
      {
         minute++;
  e4:	80 91 64 00 	lds	r24, 0x0064
  e8:	90 91 65 00 	lds	r25, 0x0065
  ec:	01 96       	adiw	r24, 0x01	; 1
  ee:	90 93 65 00 	sts	0x0065, r25
  f2:	80 93 64 00 	sts	0x0064, r24
         sekunde=0;
  f6:	10 92 63 00 	sts	0x0063, r1
  fa:	10 92 62 00 	sts	0x0062, r1
      }
      if(minute ==60)
  fe:	80 91 64 00 	lds	r24, 0x0064
 102:	90 91 65 00 	lds	r25, 0x0065
 106:	cc 97       	sbiw	r24, 0x3c	; 60
 108:	69 f4       	brne	.+26     	; 0x124 <__vector_10+0x96>
      {
        stunde++;
 10a:	80 91 66 00 	lds	r24, 0x0066
 10e:	90 91 67 00 	lds	r25, 0x0067
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 67 00 	sts	0x0067, r25
 118:	80 93 66 00 	sts	0x0066, r24
        minute=0;
 11c:	10 92 65 00 	sts	0x0065, r1
 120:	10 92 64 00 	sts	0x0064, r1
      }
   }
}
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
