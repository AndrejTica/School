
TimerInt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000003a  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b6  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000083  00000000  00000000  000002e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ea  00000000  00000000  00000365  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000009f  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e7       	ldi	r30, 0x7E	; 126
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  8a:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InitTimer0>:



#define TIMERDEFAULT (0xFF-100+1)

void InitTimer0(void) {
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  //PA_0 auf Ausgang setzen
  DDRA |=  (1<<BIT0);
  9a:	aa e3       	ldi	r26, 0x3A	; 58
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	ea e3       	ldi	r30, 0x3A	; 58
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	81 60       	ori	r24, 0x01	; 1
  a6:	8c 93       	st	X, r24
  // no prescaling
  TCCR0 |= (1<<BIT0);
  a8:	a3 e5       	ldi	r26, 0x53	; 83
  aa:	b0 e0       	ldi	r27, 0x00	; 0
  ac:	e3 e5       	ldi	r30, 0x53	; 83
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	81 60       	ori	r24, 0x01	; 1
  b4:	8c 93       	st	X, r24
  TCCR0 &= ~(1<<BIT1);
  b6:	a3 e5       	ldi	r26, 0x53	; 83
  b8:	b0 e0       	ldi	r27, 0x00	; 0
  ba:	e3 e5       	ldi	r30, 0x53	; 83
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	8d 7f       	andi	r24, 0xFD	; 253
  c2:	8c 93       	st	X, r24
  TCCR0 &= ~(1<<BIT2);
  c4:	a3 e5       	ldi	r26, 0x53	; 83
  c6:	b0 e0       	ldi	r27, 0x00	; 0
  c8:	e3 e5       	ldi	r30, 0x53	; 83
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	8b 7f       	andi	r24, 0xFB	; 251
  d0:	8c 93       	st	X, r24

  TCNT0 = TIMERDEFAULT;
  d2:	e2 e5       	ldi	r30, 0x52	; 82
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	8c e9       	ldi	r24, 0x9C	; 156
  d8:	80 83       	st	Z, r24
  // enable timerinterrupt at overflow
  TIMSK |= (1<<BIT0);
  da:	a9 e5       	ldi	r26, 0x59	; 89
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	e9 e5       	ldi	r30, 0x59	; 89
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	8c 93       	st	X, r24
  
  sei();
  e8:	78 94       	sei
}
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <main>:


int main(void) {
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62

  InitTimer0();
  f8:	0e 94 49 00 	call	0x92	; 0x92 <InitTimer0>
  while(1) { 
    PORTD = PORTD+1;
  fc:	a2 e3       	ldi	r26, 0x32	; 50
  fe:	b0 e0       	ldi	r27, 0x00	; 0
 100:	e2 e3       	ldi	r30, 0x32	; 50
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8f 5f       	subi	r24, 0xFF	; 255
 108:	8c 93       	st	X, r24
 10a:	f8 cf       	rjmp	.-16     	; 0xfc <main+0xc>

0000010c <__vector_11>:
  }
}


// Interrupt Service Routine für Timer0 Overflow
ISR (TIMER0_OVF_vect) {
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
 120:	df 93       	push	r29
 122:	cf 93       	push	r28
 124:	0f 92       	push	r0
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62

  volatile unsigned char VarPort;

  VarPort = PORTA & 0x01;
 12a:	eb e3       	ldi	r30, 0x3B	; 59
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	81 70       	andi	r24, 0x01	; 1
 132:	89 83       	std	Y+1, r24	; 0x01

  if (VarPort) {
 134:	89 81       	ldd	r24, Y+1	; 0x01
 136:	88 23       	and	r24, r24
 138:	41 f0       	breq	.+16     	; 0x14a <__vector_11+0x3e>
    PORTA &= ~(1<<BIT0);
 13a:	ab e3       	ldi	r26, 0x3B	; 59
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	eb e3       	ldi	r30, 0x3B	; 59
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8e 7f       	andi	r24, 0xFE	; 254
 146:	8c 93       	st	X, r24
 148:	07 c0       	rjmp	.+14     	; 0x158 <__vector_11+0x4c>
  }
  else {
    PORTA |= (1<<BIT0);
 14a:	ab e3       	ldi	r26, 0x3B	; 59
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	eb e3       	ldi	r30, 0x3B	; 59
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	81 60       	ori	r24, 0x01	; 1
 156:	8c 93       	st	X, r24
  }
  // Timer neu laden
  TCNT0 = TIMERDEFAULT;
 158:	e2 e5       	ldi	r30, 0x52	; 82
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	8c e9       	ldi	r24, 0x9C	; 156
 15e:	80 83       	st	Z, r24
}
 160:	0f 90       	pop	r0
 162:	cf 91       	pop	r28
 164:	df 91       	pop	r29
 166:	ff 91       	pop	r31
 168:	ef 91       	pop	r30
 16a:	bf 91       	pop	r27
 16c:	af 91       	pop	r26
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
