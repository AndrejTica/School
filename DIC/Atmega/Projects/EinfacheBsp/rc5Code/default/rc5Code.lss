
rc5Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000166  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000004  00800060  00800060  000001da  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000071  00000000  00000000  0000094d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000013c  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000000ab  00000000  00000000  00000afa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001be  00000000  00000000  00000ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000100  00000000  00000000  00000dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 0000002b  00000000  00000000  00000ec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a8 00 	call	0x150	; 0x150 <main>
  74:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initExtInt0>:
unsigned short rc5Data;
unsigned char rc5Ready;

void initExtInt0(void) {
  // falling edge
  MCUCR |= (1 << ISC01);
  7c:	85 b7       	in	r24, 0x35	; 53
  7e:	82 60       	ori	r24, 0x02	; 2
  80:	85 bf       	out	0x35, r24	; 53
  MCUCR &= ~(1 << ISC00);
  82:	85 b7       	in	r24, 0x35	; 53
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	85 bf       	out	0x35, r24	; 53
  // Interrupt enable
  GICR  |= (1<<INT0);
  88:	8b b7       	in	r24, 0x3b	; 59
  8a:	80 64       	ori	r24, 0x40	; 64
  8c:	8b bf       	out	0x3b, r24	; 59
}
  8e:	08 95       	ret

00000090 <initTimer1>:

void initTimer1(void) {
  // erster Interrupt bei 889µs/2
  // Fosz = 4 MHz
  OCR1A = (889UL/4UL)/2UL;
  90:	8f e6       	ldi	r24, 0x6F	; 111
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	9b bd       	out	0x2b, r25	; 43
  96:	8a bd       	out	0x2a, r24	; 42
  // CTC Mode
  TCCR1A &= ~((1<<WGM10)|(1<<WGM11));
  98:	8f b5       	in	r24, 0x2f	; 47
  9a:	8c 7f       	andi	r24, 0xFC	; 252
  9c:	8f bd       	out	0x2f, r24	; 47
  TCCR1B |= (1<<WGM12);
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	8e bd       	out	0x2e, r24	; 46
  TCCR1B &= ~(1<<WGM13);
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	8e bd       	out	0x2e, r24	; 46
  TIMSK  |= (1<<OCIE1A);
  aa:	89 b7       	in	r24, 0x39	; 57
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	89 bf       	out	0x39, r24	; 57

}
  b0:	08 95       	ret

000000b2 <__vector_1>:

ISR (INT0_vect) {
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
  bc:	8f 93       	push	r24
  // Timer starten
  // Prescaler = 1
  TCCR1B |= (1<<CS10);
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8e bd       	out	0x2e, r24	; 46

}
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_7>:


ISR (TIMER1_COMPA_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	3f 93       	push	r19
  de:	8f 93       	push	r24
  e0:	9f 93       	push	r25
  static unsigned char rc5Count;
  // 1.Bit (mit Sicherheit "1")
  if (GICR & (1<<INT0)) {
  e2:	0b b6       	in	r0, 0x3b	; 59
  e4:	06 fe       	sbrs	r0, 6
  e6:	07 c0       	rjmp	.+14     	; 0xf6 <__vector_7+0x26>
    // ext Interrupt abschalten
    GICR &= ~(1<<INT0);
  e8:	8b b7       	in	r24, 0x3b	; 59
  ea:	8f 7b       	andi	r24, 0xBF	; 191
  ec:	8b bf       	out	0x3b, r24	; 59
	//OCR Wert neu laden
    OCR1A = ((889UL/4UL)*2UL);
  ee:	8c eb       	ldi	r24, 0xBC	; 188
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	9b bd       	out	0x2b, r25	; 43
  f4:	8a bd       	out	0x2a, r24	; 42
  }

  rc5Data |= PIND&(1<<PIND2);
  f6:	80 b3       	in	r24, 0x10	; 16
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	84 70       	andi	r24, 0x04	; 4
  fc:	90 70       	andi	r25, 0x00	; 0
  fe:	20 91 61 00 	lds	r18, 0x0061
 102:	30 91 62 00 	lds	r19, 0x0062
 106:	82 2b       	or	r24, r18
 108:	93 2b       	or	r25, r19
 10a:	90 93 62 00 	sts	0x0062, r25
 10e:	80 93 61 00 	sts	0x0061, r24
  if (rc5Count == 14) {
 112:	20 91 60 00 	lds	r18, 0x0060
 116:	2e 30       	cpi	r18, 0x0E	; 14
 118:	49 f4       	brne	.+18     	; 0x12c <__vector_7+0x5c>
    rc5Ready = 1;
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	80 93 63 00 	sts	0x0063, r24
	rc5Count = 1;
 120:	80 93 60 00 	sts	0x0060, r24
	// externe Interrupt disable
	GICR |= (1<<INT0);
 124:	8b b7       	in	r24, 0x3b	; 59
 126:	80 64       	ori	r24, 0x40	; 64
 128:	8b bf       	out	0x3b, r24	; 59
	return;
 12a:	09 c0       	rjmp	.+18     	; 0x13e <__vector_7+0x6e>
  }

  rc5Data <<= 1;
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	90 93 62 00 	sts	0x0062, r25
 134:	80 93 61 00 	sts	0x0061, r24
  rc5Count++;
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	20 93 60 00 	sts	0x0060, r18
}
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	3f 91       	pop	r19
 144:	2f 91       	pop	r18
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <main>:


int main(void) {
  initExtInt0();
 150:	0e 94 3e 00 	call	0x7c	; 0x7c <initExtInt0>
  initTimer1();
 154:	0e 94 48 00 	call	0x90	; 0x90 <initTimer1>
  sei();
 158:	78 94       	sei

  while(1) {
    PORTA++;
 15a:	8b b3       	in	r24, 0x1b	; 27
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	8b bb       	out	0x1b, r24	; 27
 160:	fc cf       	rjmp	.-8      	; 0x15a <main+0xa>

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>
