
ITG_MPU_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073f  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000313  00000000  00000000  00000b4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a7  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000104  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024c  00000000  00000000  00001310  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000185  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000016e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 9a 00 	call	0x134	; 0x134 <main>
  8c:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <TWI_init>:
//	TWAR:	Address Register
//	TWAMR:	Adress Mask Register

void TWI_init()
{
	PRR = PRR & (!(1<<PRTWI));
  94:	e4 e6       	ldi	r30, 0x64	; 100
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	10 82       	st	Z, r1
	TWSR = 0x0;				//Clear Status Register	
  9c:	10 92 b9 00 	sts	0x00B9, r1
	TWBR = 72;				//100kHz Takt
  a0:	88 e4       	ldi	r24, 0x48	; 72
  a2:	80 93 b8 00 	sts	0x00B8, r24
	TWCR = (1<<TWEN);		//Enable TWI
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	80 93 bc 00 	sts	0x00BC, r24
	//		(0<<TWINT)|		//Interrupt Flag
	//		(0<<TWEA)|		//Disable Acknowledge
	//		(0<<TWSTA)|		//Generate no Start-Condition
	//		(0<TWSTO)|		//Generate no Stop-Condition
	//		(0<<TWWC);		//Clear TWI-Collision Flag
  	PORTC |=(3);			//PULLUP setzen 
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	83 60       	ori	r24, 0x03	; 3
  b0:	88 b9       	out	0x08, r24	; 8
  b2:	08 95       	ret

000000b4 <TWI_Start>:
unsigned char TWI_Start(uint8_t adress,uint8_t dir)
{
	
	
//TWI Start	
	TWCR = 0;
  b4:	10 92 bc 00 	sts	0x00BC, r1
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Initiate START CONDITION
  b8:	94 ea       	ldi	r25, 0xA4	; 164
  ba:	90 93 bc 00 	sts	0x00BC, r25
	while (!(TWCR & (1<<TWINT)));			//wait for START CONDITION done (TWINT set)
  be:	90 91 bc 00 	lds	r25, 0x00BC
  c2:	97 ff       	sbrs	r25, 7
  c4:	fc cf       	rjmp	.-8      	; 0xbe <TWI_Start+0xa>
	if ((TWSR & 0xF8) != 0x08) return 1;	//break with error
  c6:	90 91 b9 00 	lds	r25, 0x00B9
  ca:	98 7f       	andi	r25, 0xF8	; 248
  cc:	98 30       	cpi	r25, 0x08	; 8
  ce:	69 f4       	brne	.+26     	; 0xea <TWI_Start+0x36>
	//TWCR &= ~(1<<TWSTA);					<--------------------------------------------------------?????????? loeschen!
	

//TWI Write Address & Direction	
	TWDR = ((adress<<1)|dir);
  d0:	88 0f       	add	r24, r24
  d2:	68 2b       	or	r22, r24
  d4:	60 93 bb 00 	sts	0x00BB, r22
	TWCR = (1<<TWINT)|(1<<TWEN);			//Start transmission of address + direction
  d8:	84 e8       	ldi	r24, 0x84	; 132
  da:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));			//Wait for Transmission done	
  de:	80 91 bc 00 	lds	r24, 0x00BC
  e2:	87 ff       	sbrs	r24, 7
  e4:	fc cf       	rjmp	.-8      	; 0xde <TWI_Start+0x2a>

//	if (((TWSR & 0xF8) != 0x18)&&(dir = 0)) return 1;	//write-error
//	else if (((TWSR & 0xF8) != 0x40)&&(dir!=0)) return 1;//read-error
		return 0;
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	08 95       	ret
	
//TWI Start	
	TWCR = 0;
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);	//Initiate START CONDITION
	while (!(TWCR & (1<<TWINT)));			//wait for START CONDITION done (TWINT set)
	if ((TWSR & 0xF8) != 0x08) return 1;	//break with error
  ea:	81 e0       	ldi	r24, 0x01	; 1

//	if (((TWSR & 0xF8) != 0x18)&&(dir = 0)) return 1;	//write-error
//	else if (((TWSR & 0xF8) != 0x40)&&(dir!=0)) return 1;//read-error
		return 0;

}
  ec:	08 95       	ret

000000ee <TWI_stop>:
//------------------------------------------------------------------------------------
void TWI_stop()
{

	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
  ee:	84 e9       	ldi	r24, 0x94	; 148
  f0:	80 93 bc 00 	sts	0x00BC, r24
  f4:	08 95       	ret

000000f6 <TWI_transmit>:

//------------------------------------------------------------------------------------
unsigned char TWI_transmit(unsigned char transmit)
{

	TWDR = transmit;
  f6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);			//Start Transmission of Data
  fa:	84 e8       	ldi	r24, 0x84	; 132
  fc:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));
 100:	80 91 bc 00 	lds	r24, 0x00BC
 104:	87 ff       	sbrs	r24, 7
 106:	fc cf       	rjmp	.-8      	; 0x100 <TWI_transmit+0xa>
//	if ((TWSR & 0xF8) != 0x28) return 1;	//error

	return 0;		
}
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	08 95       	ret

0000010c <TWI_receive_NAK>:
//------------------------------------------------------------------------------------
unsigned char TWI_receive_NAK()
{
	
	TWCR = (1<<TWINT)|(1<<TWEN);
 10c:	84 e8       	ldi	r24, 0x84	; 132
 10e:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));			//wait for data
 112:	80 91 bc 00 	lds	r24, 0x00BC
 116:	87 ff       	sbrs	r24, 7
 118:	fc cf       	rjmp	.-8      	; 0x112 <TWI_receive_NAK+0x6>
//	if ((TWSR & 0xF8) != 0x58) return 1;
//	*receive = TWDR;
	
	return (TWDR);
 11a:	80 91 bb 00 	lds	r24, 0x00BB
}
 11e:	08 95       	ret

00000120 <TWI_receive_ACK>:
//------------------------------------------------------------------------------------
unsigned char TWI_receive_ACK()
{
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 120:	84 ec       	ldi	r24, 0xC4	; 196
 122:	80 93 bc 00 	sts	0x00BC, r24
	while (!(TWCR & (1<<TWINT)));			//wait for data
 126:	80 91 bc 00 	lds	r24, 0x00BC
 12a:	87 ff       	sbrs	r24, 7
 12c:	fc cf       	rjmp	.-8      	; 0x126 <TWI_receive_ACK+0x6>
//	if ((TWSR & 0xF8) != 0x58) return 1;
//	*receive = TWDR;
	
	return (TWDR);
 12e:	80 91 bb 00 	lds	r24, 0x00BB
}
 132:	08 95       	ret

00000134 <main>:

	int16_t AccX,AccY,AccZ;
	int16_t LValue;
	int16_t HValue;

	TWI_init();
 134:	0e 94 4a 00 	call	0x94	; 0x94 <TWI_init>
	usart_init();
 138:	0e 94 16 01 	call	0x22c	; 0x22c <usart_init>
		HValue=TWI_receive_ACK();
		LValue = TWI_receive_NAK();
		TWI_stop();
		AccZ = (HValue<<8)|LValue;

		PORTC ^= (1 << 2);
 13c:	34 e0       	ldi	r19, 0x04	; 4
 13e:	d3 2e       	mov	r13, r19
		

	while (1)
	{
		
		TWI_Start(MPU6050_I2C_ADDRESS,WR);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	88 e6       	ldi	r24, 0x68	; 104
 144:	0e 94 5a 00 	call	0xb4	; 0xb4 <TWI_Start>
		TWI_transmit(PWR_MGMT_1);
 148:	8b e6       	ldi	r24, 0x6B	; 107
 14a:	0e 94 7b 00 	call	0xf6	; 0xf6 <TWI_transmit>
		TWI_transmit(0);
 14e:	80 e0       	ldi	r24, 0x00	; 0
 150:	0e 94 7b 00 	call	0xf6	; 0xf6 <TWI_transmit>
		TWI_stop();
 154:	0e 94 77 00 	call	0xee	; 0xee <TWI_stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	87 ec       	ldi	r24, 0xC7	; 199
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <main+0x28>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x2e>
 162:	00 00       	nop
		_delay_us(50);
	
		usart_transmit(0x0D);
 164:	8d e0       	ldi	r24, 0x0D	; 13
 166:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		usart_transmit(0x0A);
 16a:	8a e0       	ldi	r24, 0x0A	; 10
 16c:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		
		
//MPU6050 auslesen
		TWI_Start(MPU6050_I2C_ADDRESS,WR);		//select MPU6050 
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	88 e6       	ldi	r24, 0x68	; 104
 174:	0e 94 5a 00 	call	0xb4	; 0xb4 <TWI_Start>
		TWI_transmit(ACCEL_XOUT_H);	//select AccX, High Byte 0x3B
 178:	8b e3       	ldi	r24, 0x3B	; 59
 17a:	0e 94 7b 00 	call	0xf6	; 0xf6 <TWI_transmit>

		TWI_Start(MPU6050_I2C_ADDRESS,RD);		//Start reading
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	88 e6       	ldi	r24, 0x68	; 104
 182:	0e 94 5a 00 	call	0xb4	; 0xb4 <TWI_Start>
		HValue=TWI_receive_ACK();
 186:	0e 94 90 00 	call	0x120	; 0x120 <TWI_receive_ACK>
 18a:	e8 2e       	mov	r14, r24
		LValue= TWI_receive_ACK();
 18c:	0e 94 90 00 	call	0x120	; 0x120 <TWI_receive_ACK>
//MPU6050 auslesen
		TWI_Start(MPU6050_I2C_ADDRESS,WR);		//select MPU6050 
		TWI_transmit(ACCEL_XOUT_H);	//select AccX, High Byte 0x3B

		TWI_Start(MPU6050_I2C_ADDRESS,RD);		//Start reading
		HValue=TWI_receive_ACK();
 190:	f1 2c       	mov	r15, r1
		LValue= TWI_receive_ACK();
		AccX = (HValue<<8)|LValue;
 192:	fe 2c       	mov	r15, r14
 194:	ee 24       	eor	r14, r14
 196:	e8 2a       	or	r14, r24
		
		HValue = TWI_receive_ACK();
 198:	0e 94 90 00 	call	0x120	; 0x120 <TWI_receive_ACK>
 19c:	c8 2f       	mov	r28, r24
		LValue = TWI_receive_ACK();
 19e:	0e 94 90 00 	call	0x120	; 0x120 <TWI_receive_ACK>
		TWI_Start(MPU6050_I2C_ADDRESS,RD);		//Start reading
		HValue=TWI_receive_ACK();
		LValue= TWI_receive_ACK();
		AccX = (HValue<<8)|LValue;
		
		HValue = TWI_receive_ACK();
 1a2:	d0 e0       	ldi	r29, 0x00	; 0
		LValue = TWI_receive_ACK();
		AccY = (HValue<<8)|LValue;
 1a4:	dc 2f       	mov	r29, r28
 1a6:	cc 27       	eor	r28, r28
 1a8:	c8 2b       	or	r28, r24
		
		HValue=TWI_receive_ACK();
 1aa:	0e 94 90 00 	call	0x120	; 0x120 <TWI_receive_ACK>
 1ae:	c8 2e       	mov	r12, r24
		LValue = TWI_receive_NAK();
 1b0:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_receive_NAK>
 1b4:	08 2f       	mov	r16, r24
		TWI_stop();
 1b6:	0e 94 77 00 	call	0xee	; 0xee <TWI_stop>
		AccZ = (HValue<<8)|LValue;
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	1c 29       	or	r17, r12

		PORTC ^= (1 << 2);
 1be:	88 b1       	in	r24, 0x08	; 8
 1c0:	8d 25       	eor	r24, r13
 1c2:	88 b9       	out	0x08, r24	; 8

		usart_transmit('X');
 1c4:	88 e5       	ldi	r24, 0x58	; 88
 1c6:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		usart_transmit(':');
 1ca:	8a e3       	ldi	r24, 0x3A	; 58
 1cc:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		int2usart(AccX);
 1d0:	c7 01       	movw	r24, r14
 1d2:	0e 94 2a 01 	call	0x254	; 0x254 <int2usart>
		usart_transmit(';');
 1d6:	8b e3       	ldi	r24, 0x3B	; 59
 1d8:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		usart_transmit(' ');
 1dc:	80 e2       	ldi	r24, 0x20	; 32
 1de:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>

		usart_transmit('Y');
 1e2:	89 e5       	ldi	r24, 0x59	; 89
 1e4:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		usart_transmit(':');
 1e8:	8a e3       	ldi	r24, 0x3A	; 58
 1ea:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		int2usart(AccY);
 1ee:	ce 01       	movw	r24, r28
 1f0:	0e 94 2a 01 	call	0x254	; 0x254 <int2usart>
		usart_transmit(';');
 1f4:	8b e3       	ldi	r24, 0x3B	; 59
 1f6:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		usart_transmit(' ');
 1fa:	80 e2       	ldi	r24, 0x20	; 32
 1fc:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>

		usart_transmit('Z');
 200:	8a e5       	ldi	r24, 0x5A	; 90
 202:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		usart_transmit(':');
 206:	8a e3       	ldi	r24, 0x3A	; 58
 208:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
		int2usart(AccZ);
 20c:	c8 01       	movw	r24, r16
 20e:	0e 94 2a 01 	call	0x254	; 0x254 <int2usart>
		usart_transmit(';');
 212:	8b e3       	ldi	r24, 0x3B	; 59
 214:	0e 94 23 01 	call	0x246	; 0x246 <usart_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	9f ef       	ldi	r25, 0xFF	; 255
 21a:	21 ee       	ldi	r18, 0xE1	; 225
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	91 50       	subi	r25, 0x01	; 1
 220:	20 40       	sbci	r18, 0x00	; 0
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0xea>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0xf4>
 228:	00 00       	nop
 22a:	8a cf       	rjmp	.-236    	; 0x140 <main+0xc>

0000022c <usart_init>:
//****************************************************
void usart_init()
{

//enable USART
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);	//Freigabe Receiver und Transmitter
 22c:	88 e1       	ldi	r24, 0x18	; 24
 22e:	80 93 c1 00 	sts	0x00C1, r24
//frame format 8n2 (8data, no parity,2stop)
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 232:	8e e0       	ldi	r24, 0x0E	; 14
 234:	80 93 c2 00 	sts	0x00C2, r24
//set baud rate
	UBRR0 = ( unsigned int ) UBRR;
 238:	84 e4       	ldi	r24, 0x44	; 68
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	90 93 c5 00 	sts	0x00C5, r25
 240:	80 93 c4 00 	sts	0x00C4, r24
 244:	08 95       	ret

00000246 <usart_transmit>:

void usart_transmit(unsigned char data)
{
//wait for empty buffer

	while (!(UCSR0A & (1<<UDRE0)));
 246:	90 91 c0 00 	lds	r25, 0x00C0
 24a:	95 ff       	sbrs	r25, 5
 24c:	fc cf       	rjmp	.-8      	; 0x246 <usart_transmit>
	
	UDR0 = data;
 24e:	80 93 c6 00 	sts	0x00C6, r24
 252:	08 95       	ret

00000254 <int2usart>:
	return UDR0;
}

//------------------------------------------------------------------------------------
void int2usart(uint16_t i)		//Rekursive Funktion, die ein unsigned Int auf die Usart ausgibt
{
 254:	cf 93       	push	r28
	char temp;
    if(i > 0){
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	69 f0       	breq	.+26     	; 0x274 <int2usart+0x20>
        int2usart(i/10);
 25a:	6a e0       	ldi	r22, 0x0A	; 10
 25c:	70 e0       	ldi	r23, 0x00	; 0
 25e:	0e 94 3c 01 	call	0x278	; 0x278 <__udivmodhi4>
 262:	c8 2f       	mov	r28, r24
 264:	cb 01       	movw	r24, r22
 266:	0e 94 2a 01 	call	0x254	; 0x254 <int2usart>
        temp = (i%10) + '0';
        usart_transmit(temp);
 26a:	80 e3       	ldi	r24, 0x30	; 48
 26c:	8c 0f       	add	r24, r28
    }

}
 26e:	cf 91       	pop	r28
{
	char temp;
    if(i > 0){
        int2usart(i/10);
        temp = (i%10) + '0';
        usart_transmit(temp);
 270:	0c 94 23 01 	jmp	0x246	; 0x246 <usart_transmit>
    }

}
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <__udivmodhi4>:
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	51 e1       	ldi	r21, 0x11	; 17
 27e:	07 c0       	rjmp	.+14     	; 0x28e <__udivmodhi4_ep>

00000280 <__udivmodhi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	a6 17       	cp	r26, r22
 286:	b7 07       	cpc	r27, r23
 288:	10 f0       	brcs	.+4      	; 0x28e <__udivmodhi4_ep>
 28a:	a6 1b       	sub	r26, r22
 28c:	b7 0b       	sbc	r27, r23

0000028e <__udivmodhi4_ep>:
 28e:	88 1f       	adc	r24, r24
 290:	99 1f       	adc	r25, r25
 292:	5a 95       	dec	r21
 294:	a9 f7       	brne	.-22     	; 0x280 <__udivmodhi4_loop>
 296:	80 95       	com	r24
 298:	90 95       	com	r25
 29a:	bc 01       	movw	r22, r24
 29c:	cd 01       	movw	r24, r26
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
