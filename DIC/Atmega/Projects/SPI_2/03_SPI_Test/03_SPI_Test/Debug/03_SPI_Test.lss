
03_SPI_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000362  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000030e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000362  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000394  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf2  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000837  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000044f  00000000  00000000  0000187d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a2  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f7  00000000  00000000  0000238a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00002581  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  8c:	0c 94 85 01 	jmp	0x30a	; 0x30a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <DelayMs>:
#include <util/delay.h>
#endif

void
DelayMs( unsigned int aDelayMs )
{
  94:	cf 93       	push	r28
  96:	df 93       	push	r29
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	28 97       	sbiw	r28, 0x08	; 8
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	98 87       	std	Y+8, r25	; 0x08
  aa:	8f 83       	std	Y+7, r24	; 0x07
#ifdef DEBUG
    volatile unsigned long counter;
    volatile unsigned int help;
    for ( counter = 0; counter < aDelayMs * 150UL; counter++)
  ac:	19 82       	std	Y+1, r1	; 0x01
  ae:	1a 82       	std	Y+2, r1	; 0x02
  b0:	1b 82       	std	Y+3, r1	; 0x03
  b2:	1c 82       	std	Y+4, r1	; 0x04
  b4:	10 c0       	rjmp	.+32     	; 0xd6 <DelayMs+0x42>
    help++;
  b6:	8d 81       	ldd	r24, Y+5	; 0x05
  b8:	9e 81       	ldd	r25, Y+6	; 0x06
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	9e 83       	std	Y+6, r25	; 0x06
  be:	8d 83       	std	Y+5, r24	; 0x05
DelayMs( unsigned int aDelayMs )
{
#ifdef DEBUG
    volatile unsigned long counter;
    volatile unsigned int help;
    for ( counter = 0; counter < aDelayMs * 150UL; counter++)
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	9a 81       	ldd	r25, Y+2	; 0x02
  c4:	ab 81       	ldd	r26, Y+3	; 0x03
  c6:	bc 81       	ldd	r27, Y+4	; 0x04
  c8:	01 96       	adiw	r24, 0x01	; 1
  ca:	a1 1d       	adc	r26, r1
  cc:	b1 1d       	adc	r27, r1
  ce:	89 83       	std	Y+1, r24	; 0x01
  d0:	9a 83       	std	Y+2, r25	; 0x02
  d2:	ab 83       	std	Y+3, r26	; 0x03
  d4:	bc 83       	std	Y+4, r27	; 0x04
  d6:	8f 81       	ldd	r24, Y+7	; 0x07
  d8:	98 85       	ldd	r25, Y+8	; 0x08
  da:	9c 01       	movw	r18, r24
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	86 e9       	ldi	r24, 0x96	; 150
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	dc 01       	movw	r26, r24
  e6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <__muluhisi3>
  ea:	9b 01       	movw	r18, r22
  ec:	ac 01       	movw	r20, r24
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	ab 81       	ldd	r26, Y+3	; 0x03
  f4:	bc 81       	ldd	r27, Y+4	; 0x04
  f6:	82 17       	cp	r24, r18
  f8:	93 07       	cpc	r25, r19
  fa:	a4 07       	cpc	r26, r20
  fc:	b5 07       	cpc	r27, r21
  fe:	d8 f2       	brcs	.-74     	; 0xb6 <DelayMs+0x22>
    help++;
#else
    _delay_ms( aDelayMs );
#endif
}
 100:	00 00       	nop
 102:	28 96       	adiw	r28, 0x08	; 8
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <main>:

#include <avr/io.h>
#include "SPI.h"

int main(void)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	00 d0       	rcall	.+0      	; 0x11a <main+0x6>
 11a:	00 d0       	rcall	.+0      	; 0x11c <main+0x8>
 11c:	00 d0       	rcall	.+0      	; 0x11e <main+0xa>
 11e:	cd b7       	in	r28, 0x3d	; 61
 120:	de b7       	in	r29, 0x3e	; 62
	TSPIMODE mode1;
	
	SPIGetDefaultValue(&mode1);
 122:	ce 01       	movw	r24, r28
 124:	02 96       	adiw	r24, 0x02	; 2
 126:	0e 94 23 01 	call	0x246	; 0x246 <SPIGetDefaultValue>
	SPIInit(mode1);
 12a:	4a 81       	ldd	r20, Y+2	; 0x02
 12c:	5b 81       	ldd	r21, Y+3	; 0x03
 12e:	6c 81       	ldd	r22, Y+4	; 0x04
 130:	7d 81       	ldd	r23, Y+5	; 0x05
 132:	8e 81       	ldd	r24, Y+6	; 0x06
 134:	0e 94 be 00 	call	0x17c	; 0x17c <SPIInit>
	
	unsigned char counter = 0;
 138:	19 82       	std	Y+1, r1	; 0x01
	
    /* Replace with your application code */
    while (1)
	{
		
		PORTB &= ~(1<<4);
 13a:	85 e2       	ldi	r24, 0x25	; 37
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	25 e2       	ldi	r18, 0x25	; 37
 140:	30 e0       	ldi	r19, 0x00	; 0
 142:	f9 01       	movw	r30, r18
 144:	20 81       	ld	r18, Z
 146:	2f 7e       	andi	r18, 0xEF	; 239
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
		DelayMs(100);
 14c:	84 e6       	ldi	r24, 0x64	; 100
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 4a 00 	call	0x94	; 0x94 <DelayMs>
		SPIWriteByte(counter++);
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	98 0f       	add	r25, r24
 15a:	99 83       	std	Y+1, r25	; 0x01
 15c:	0e 94 4d 01 	call	0x29a	; 0x29a <SPIWriteByte>
		PORTB |= (1<<4);
 160:	85 e2       	ldi	r24, 0x25	; 37
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	25 e2       	ldi	r18, 0x25	; 37
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	f9 01       	movw	r30, r18
 16a:	20 81       	ld	r18, Z
 16c:	20 61       	ori	r18, 0x10	; 16
 16e:	fc 01       	movw	r30, r24
 170:	20 83       	st	Z, r18
		DelayMs(100);
 172:	84 e6       	ldi	r24, 0x64	; 100
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 4a 00 	call	0x94	; 0x94 <DelayMs>
    }
 17a:	df cf       	rjmp	.-66     	; 0x13a <main+0x26>

0000017c <SPIInit>:
#include <stdio.h>
#include "HtlStddef.h"
#include "SPI.h"
#include <string.h>

TBool SPIInit(TSPIMODE aSpiMode){
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	00 d0       	rcall	.+0      	; 0x182 <SPIInit+0x6>
 182:	00 d0       	rcall	.+0      	; 0x184 <SPIInit+0x8>
 184:	1f 92       	push	r1
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	49 83       	std	Y+1, r20	; 0x01
 18c:	5a 83       	std	Y+2, r21	; 0x02
 18e:	6b 83       	std	Y+3, r22	; 0x03
 190:	7c 83       	std	Y+4, r23	; 0x04
 192:	8d 83       	std	Y+5, r24	; 0x05
	
	
	DDRB |= (1<<4)|(1<<5)|(1<<7);	//4 -> PB5 = SS
 194:	84 e2       	ldi	r24, 0x24	; 36
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	24 e2       	ldi	r18, 0x24	; 36
 19a:	30 e0       	ldi	r19, 0x00	; 0
 19c:	f9 01       	movw	r30, r18
 19e:	20 81       	ld	r18, Z
 1a0:	20 6b       	ori	r18, 0xB0	; 176
 1a2:	fc 01       	movw	r30, r24
 1a4:	20 83       	st	Z, r18
									//6 -> PB7 = CLK
	
	//DDRB &= ~(1<<6);				//7 -> PB6 = MISO
	
	
	SPCR |= (1<<SPE) | (aSpiMode.DataOrder<<DOR0) | (aSpiMode.MasterSlave<<MSTR) | (aSpiMode.Prescaler<<SPR0) | (aSpiMode.CPha<<CPHA) | (aSpiMode.Cpol<<CPOL) | ((aSpiMode.Prescaler&0x3)<<SPR0);
 1a6:	8c e4       	ldi	r24, 0x4C	; 76
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	2c e4       	ldi	r18, 0x4C	; 76
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	f9 01       	movw	r30, r18
 1b0:	20 81       	ld	r18, Z
 1b2:	52 2f       	mov	r21, r18
 1b4:	2c 81       	ldd	r18, Y+4	; 0x04
 1b6:	22 2f       	mov	r18, r18
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	22 0f       	add	r18, r18
 1bc:	33 1f       	adc	r19, r19
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	22 0f       	add	r18, r18
 1c4:	33 1f       	adc	r19, r19
 1c6:	42 2f       	mov	r20, r18
 1c8:	40 64       	ori	r20, 0x40	; 64
 1ca:	2d 81       	ldd	r18, Y+5	; 0x05
 1cc:	22 2f       	mov	r18, r18
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	22 95       	swap	r18
 1d2:	32 95       	swap	r19
 1d4:	30 7f       	andi	r19, 0xF0	; 240
 1d6:	32 27       	eor	r19, r18
 1d8:	20 7f       	andi	r18, 0xF0	; 240
 1da:	32 27       	eor	r19, r18
 1dc:	24 2b       	or	r18, r20
 1de:	39 81       	ldd	r19, Y+1	; 0x01
 1e0:	42 2f       	mov	r20, r18
 1e2:	43 2b       	or	r20, r19
 1e4:	2b 81       	ldd	r18, Y+3	; 0x03
 1e6:	22 2f       	mov	r18, r18
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	22 0f       	add	r18, r18
 1ec:	33 1f       	adc	r19, r19
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	42 2b       	or	r20, r18
 1f4:	2a 81       	ldd	r18, Y+2	; 0x02
 1f6:	22 2f       	mov	r18, r18
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	22 0f       	add	r18, r18
 1fc:	33 1f       	adc	r19, r19
 1fe:	22 0f       	add	r18, r18
 200:	33 1f       	adc	r19, r19
 202:	22 0f       	add	r18, r18
 204:	33 1f       	adc	r19, r19
 206:	34 2f       	mov	r19, r20
 208:	32 2b       	or	r19, r18
 20a:	29 81       	ldd	r18, Y+1	; 0x01
 20c:	23 70       	andi	r18, 0x03	; 3
 20e:	23 2b       	or	r18, r19
 210:	25 2b       	or	r18, r21
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
	SPSR |= ((aSpiMode.Prescaler>3)?1:0) << SPI2X;
 216:	8d e4       	ldi	r24, 0x4D	; 77
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	2d e4       	ldi	r18, 0x4D	; 77
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	f9 01       	movw	r30, r18
 220:	20 81       	ld	r18, Z
 222:	42 2f       	mov	r20, r18
 224:	39 81       	ldd	r19, Y+1	; 0x01
 226:	21 e0       	ldi	r18, 0x01	; 1
 228:	34 30       	cpi	r19, 0x04	; 4
 22a:	08 f4       	brcc	.+2      	; 0x22e <SPIInit+0xb2>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	24 2b       	or	r18, r20
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
	
	return ETRUE;
 234:	81 e0       	ldi	r24, 0x01	; 1
}
 236:	0f 90       	pop	r0
 238:	0f 90       	pop	r0
 23a:	0f 90       	pop	r0
 23c:	0f 90       	pop	r0
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <SPIGetDefaultValue>:

void SPIGetDefaultValue(TSPIMODE *aSpiMode){
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	00 d0       	rcall	.+0      	; 0x24c <SPIGetDefaultValue+0x6>
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	9a 83       	std	Y+2, r25	; 0x02
 252:	89 83       	std	Y+1, r24	; 0x01
	
	memset(aSpiMode, 0, sizeof(TSPIMODE));
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	9a 81       	ldd	r25, Y+2	; 0x02
 258:	45 e0       	ldi	r20, 0x05	; 5
 25a:	50 e0       	ldi	r21, 0x00	; 0
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	0e 94 7e 01 	call	0x2fc	; 0x2fc <memset>
	aSpiMode->Prescaler		= ESPI_PRESCALER_4;
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	9a 81       	ldd	r25, Y+2	; 0x02
 268:	fc 01       	movw	r30, r24
 26a:	10 82       	st	Z, r1
	aSpiMode->Cpol			= EACPOL_RISING;
 26c:	89 81       	ldd	r24, Y+1	; 0x01
 26e:	9a 81       	ldd	r25, Y+2	; 0x02
 270:	fc 01       	movw	r30, r24
 272:	11 82       	std	Z+1, r1	; 0x01
	aSpiMode->CPha			= ECPHA_LEAD_SAMPLE;
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	9a 81       	ldd	r25, Y+2	; 0x02
 278:	fc 01       	movw	r30, r24
 27a:	12 82       	std	Z+2, r1	; 0x02
	aSpiMode->DataOrder		= EDATAORDER_MSB_FIRST;
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	fc 01       	movw	r30, r24
 282:	13 82       	std	Z+3, r1	; 0x03
	aSpiMode->MasterSlave	= EMASTER;
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	9a 81       	ldd	r25, Y+2	; 0x02
 288:	21 e0       	ldi	r18, 0x01	; 1
 28a:	fc 01       	movw	r30, r24
 28c:	24 83       	std	Z+4, r18	; 0x04
	
}
 28e:	00 00       	nop
 290:	0f 90       	pop	r0
 292:	0f 90       	pop	r0
 294:	df 91       	pop	r29
 296:	cf 91       	pop	r28
 298:	08 95       	ret

0000029a <SPIWriteByte>:

TBool SPIWriteByte(unsigned char aData){
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	1f 92       	push	r1
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
 2a4:	89 83       	std	Y+1, r24	; 0x01
	
	SPDR = aData;
 2a6:	8e e4       	ldi	r24, 0x4E	; 78
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	29 81       	ldd	r18, Y+1	; 0x01
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
 2b0:	00 00       	nop
 2b2:	8d e4       	ldi	r24, 0x4D	; 77
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	fc 01       	movw	r30, r24
 2b8:	80 81       	ld	r24, Z
 2ba:	88 23       	and	r24, r24
 2bc:	d4 f7       	brge	.-12     	; 0x2b2 <SPIWriteByte+0x18>
	
	return ETRUE;
 2be:	81 e0       	ldi	r24, 0x01	; 1
}
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <__muluhisi3>:
 2c8:	0e 94 6f 01 	call	0x2de	; 0x2de <__umulhisi3>
 2cc:	a5 9f       	mul	r26, r21
 2ce:	90 0d       	add	r25, r0
 2d0:	b4 9f       	mul	r27, r20
 2d2:	90 0d       	add	r25, r0
 2d4:	a4 9f       	mul	r26, r20
 2d6:	80 0d       	add	r24, r0
 2d8:	91 1d       	adc	r25, r1
 2da:	11 24       	eor	r1, r1
 2dc:	08 95       	ret

000002de <__umulhisi3>:
 2de:	a2 9f       	mul	r26, r18
 2e0:	b0 01       	movw	r22, r0
 2e2:	b3 9f       	mul	r27, r19
 2e4:	c0 01       	movw	r24, r0
 2e6:	a3 9f       	mul	r26, r19
 2e8:	70 0d       	add	r23, r0
 2ea:	81 1d       	adc	r24, r1
 2ec:	11 24       	eor	r1, r1
 2ee:	91 1d       	adc	r25, r1
 2f0:	b2 9f       	mul	r27, r18
 2f2:	70 0d       	add	r23, r0
 2f4:	81 1d       	adc	r24, r1
 2f6:	11 24       	eor	r1, r1
 2f8:	91 1d       	adc	r25, r1
 2fa:	08 95       	ret

000002fc <memset>:
 2fc:	dc 01       	movw	r26, r24
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <memset+0x6>
 300:	6d 93       	st	X+, r22
 302:	41 50       	subi	r20, 0x01	; 1
 304:	50 40       	sbci	r21, 0x00	; 0
 306:	e0 f7       	brcc	.-8      	; 0x300 <memset+0x4>
 308:	08 95       	ret

0000030a <_exit>:
 30a:	f8 94       	cli

0000030c <__stop_program>:
 30c:	ff cf       	rjmp	.-2      	; 0x30c <__stop_program>
