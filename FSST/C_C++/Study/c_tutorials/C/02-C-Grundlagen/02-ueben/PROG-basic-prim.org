* PROG-basic-prim

* 1. Beispiel: teiler1
- [ ] Lies n ein und gib alle Teiler von n aus.
- [ ] Hinweis: n%2 ….liefert 0 wenn n durch 2 teilbar ist
- [ ] Hinweis: Zum Vergleichen verwende ==

* 2. Beispiel: teiler2
- [ ] Lies 2 Zahlen ein (start,ende).
- [ ] Gib von jeder Zahl zwischen start und ende die Teiler

- [ ] Bsp: start:3 ende:5
#+BEGIN_SRC
	Teiler von 3
	Teiler: 1
	Teiler: 3
	Teiler von 4
	Teiler: 1
	Teiler: 2
	Teiler: 4
	Teiler von 5
	Teiler: 1
	Teiler: 5
#+END_SRC

* 3. Beispiel: Primzahl
	Lies eine integer Zahl (n) ein.
	Das Programm soll nur eine positive Zahl größer gleich 2 zulassen.
	Gib aus, ob es sich um eine Primzahl handelt.

	Gegeben ist folgender Programmablaufplan für einen Primzahltest:
	Wir testen zunächst, ob die Testzahl gerade ist und
	prüfen dann alle ungeraden Zahlen (>2) bis zur Testzahl (n) als mögliche Teiler (t).
	Damit ließe sich der Primzahltest nun wie folgt beschreiben:

	1) Einlesen der Testzahl n.
	2) Wenn n den Wert 2 oder 3 Ausgabe: „Primzahl“
	3) Sonst Weise der Variablen teiler den Wert 3 zu.
	4) Wiederhole bis teiler kleiner der Testzahl n ist:
	5) Ist n durch teiler teilbar? Wenn ja,Ausgabe: "keine Primzahl". Programmende
	6) Erhöhe den Wert von teiler um 2.
	7) Ausgabe: n "ist eine Primzahl".
* 4. Beispiel: Primfaktorzerlegung
- Lies n ein und
- Gib alle Teiler von n aus.

- Beispiel für eine Ausgabe zu n = 100:
  - 100 = 2 * 2 * 5 * 5 .

- Hinweis: Teste die Teiler d = 2, 3, ...
  - wenn d ein Teiler von n ist, dann: n= n / d   (mit n > 1)
  - sonst: nimm den nächsten Teiler

* 5. Beispiel: pow
- Lies x und y ein.
- Berechne/gib x hoch y aus.

* 6. Beispiel: Schnelles Potenzieren
#+BEGIN_SRC
- X hoch y kann man wie folgt sehr schnell berechnen:
- wenn y ungerade:
   - ergebnis= ergebnis*x;
   - y= y-1;
- wenn y gerade:
  - x= x*x;
  - y= y/2;

Beispiel: x=3 und y=16
   ergebnis= 3 hoch 16
   ergebnis= (3 hoch 2) hoch 8

Beispiel: x=3 und y=17
   ergebnis= 3 hoch 17
   ergebnis= 3 hoch 16 * 3
   ergebnis*3=3 hoch 16

#+END_SRC

* 7. Beispiel: PerfekteZahl
- Eine natürliche Zahl n nennt man eine perfekte Zahl, wenn sie gleich der Summe
aller echten Teiler ist.

- Bsp:
  - Sie Summe der echten Teiler von n soll T(n) bezeichnet werden.
  - T(6)= 3+2+1
  - T(28)= 14+7+4+2+1

- Hinweis:
  - echte Teiler von n werden alle natürlichen Teiler von n einschliesslich 1,
  - aber ohne n bezeichnet.

- Schreiben Sie ein Programm, das
  - n einliest und
  - ausgibt ob es sich um eine perfekte Zahl handelt oder nicht.
  - Zusätzlich sollen die Teiler und die Summe der Teiler ausgegeben werden.

* 8. Beispiel: Vielfache von 3 oder 5
Berechne die Summe der Zahlen zwischen 1 und 10 (exkl.), die
Vielfache von 3 oder 5 sind.

- Beispiel: zahl=10
- Die Vielfachen von 3 oder 5 sind: 3,6,9,5
- Die Summe ist 23

Aufgabe: Lies Zahl ein und berechne nach der obigen Angabe
die Summe der Vielfachen von 3 und 5.

* 9. Beispiel: phi von n

#+BEGIN_SRC c
/**
 *@brief Eulerschi phi-Funktion

 @file	phi.c
 @author N.N.
 @description
 Die Funktion liefert die Anzahl der zu n (=Eingabe) teilerfremden
 Zahlen im Bereich [1,n].
 */

#include <stdio.h>
#include <stdlib.h>

// Die Funktion: ggt() liefert
// den größten gemeinsamen Teiler von a und b
int ggt (int a, int b){
	if (b==0) return a;
	else return ggt(b, a%b);
}


int main(){
	int i, n, phi=0;

	printf("*** Eulersche PHI-Funktion ***\n");
	printf("n eingeben? ");
	scanf("%i" , &n);

	???????????????????????????

	printf("\nphi(%i)= %i\n", n, phi);

	return 0;
}
#+END_SRC
