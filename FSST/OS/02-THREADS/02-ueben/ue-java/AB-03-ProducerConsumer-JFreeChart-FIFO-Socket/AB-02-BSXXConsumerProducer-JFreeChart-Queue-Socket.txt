-- =====================================================
-- ue-02-BSXXConsumerProducer-JFreeChart-Queue-Socket.txt

-- Ein Beispiel für:
-- JFreeChart
-- Observer-Pattern
-- Threads, Synchronisation
-- Ringschlange
-- Netzwerkprogrammierung
-- Handyprogrammierung
-- =====================================================


Übersicht:
--------------------------------------------------------
Das Programm demonstriert das klassische 
Producer/Consumer Programm mit nebenläufigen Prozessen



Allg. Beschreibung
------------------
Integer-Werte werden zwischen Producer u. Consumer folgend
ausgetauscht


* Der Producer 
	* liest von einem ServerSocket (Port 4444) Daten und
	* schreibt die Daten in eine Ringschlange
	
* Der Consumer 
	* liest die Daten aus der Ringschlange und
	* zeigt diese Daten in einem JFreeChart-Diagramm an


Beispiel:
----------
telnet localhost 4444
	oder
Android99-AsyncTsk-socket
    |
    V
Producer.java     
    |
    V
Ringschlange.java
RingschlangePanel.java
    |
    V
Consumer.java
ConsumerPanel.java


Main.java
	* startet die versch. threads/Guis



Dateien:
-------------
Main.java (s.u.)
RingSchlange.java (zu programmieren)
RingSchlangePanel.java (s.u.)
Producer.java (zu programmieren)
ConsumerPanel.java (s.u.)
Consumer.java (zu programmieren)



Hinweis: JFreeChart
---------------------------------------------------------------
install: siehe /4ME/DOKU/
	howto-install-jfreechart.txt

Probiere:
	DialDemo3.java




Hinweis: MVC - Observer/Observable
--------------------------------------------------------
Model: extends Observable
	setChanged();
	notifyObservers(data);
		

View/Panel: implementents Observer
	@Override
	public void update(Observable arg0, Object arg1) {
		this.dataset.setValue((Integer) arg1);
	}






Hinweis: OS-Threads und Synchronisation
--------------------------------------------------------
	shared Memory
	Sperr- und Ereignissynchronisation

	synchronized .....
		while (isFull()) wait();
		...
		notify();

	
	
Hinweis: FIFO-Speicher
--------------------------------------------------------
	Ringschlange
	



Hinweis: Android Handy
--------------------------------------------------------
1.
androidManifest.xml
 <uses-permission android:name="android.permission.INTERNET"/>
   

2.
/*
 * 2.3. AsyncTask

The class AsyncTask encapsulates the creation of Threads and Handlers. 
You must implement the method "doInBackground()", which defines what action 
should be done in the background. This method is be automatically run in a 
separate Thread. To update the UI you can override the method "onPostExecute()". 
This method will be called by the framework once your action is done and runs 
within the UI thread. AsyncTask

To use AsyncTask you must subclass it. AsyncTask uses generics and varargs.
The parameters are the following 
AsyncTask <TypeOfVarArgParams , ProgressValue , ResultValue> . 
TypeOfVarArgParams is passed into the doInBackground(), 
ProgressValue is used for progress information and 
ResultValue must be returned from doInBackground() and 
is passed to onPostExecute() as parameter. 

 */
...
	toServerTask= new ToServerTask();
	toServerTask.execute(sOutput);

...
	private class ToServerTask extends AsyncTask<String, Void, Void> {

		protected Void doInBackground(String... arg0) {
			bout.println(arg0[0]);
			bout.flush();
			return null;
		}

		protected void onProgressUpdate(Void v) {
		}

		protected void onPostExecute(Void result) {
		}
	}





FERTIG: Main.java
--------------------------------------------------------
import java.awt.BorderLayout;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Observer;

import javax.swing.JFrame;
import javax.swing.JPanel;


public class Main {
	public static void main(String args[]) throws IOException { 
		// PUFFER (gem. Speicher) 
		// ----------------------------------------------------------------
		RingSchlange fifo= new RingSchlange(10);
		RingSchlangePanel ringSchlangePanel= new RingSchlangePanel(); 

		
		// CONSUMER 
		// ----------------------------------------------------------------
		ConsumerPanel consumerPanel= new ConsumerPanel();
		Consumer consumer= new Consumer(fifo);
		
		// Observer-pattern
		fifo.addObserver(ringSchlangePanel);
		consumer.addObserver( consumerPanel);

		
		// GUI erzeugen
		JFrame gui= new JFrame("Producer Consumer example");
		gui.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		gui.setContentPane(new JPanel(new BorderLayout()));
		gui.getContentPane().add(consumerPanel, BorderLayout.WEST);
		gui.getContentPane().add(ringSchlangePanel, BorderLayout.CENTER);

		gui.pack();
		gui.setVisible(true);


		// teste die Ringschlange
		fifo.enqueue(new Integer(50));



		// PRODUCER 
		// ----------------------------------------------------------------
		ServerSocket serverSocket= new ServerSocket(4444);	    
		while(true){
			Socket socket= serverSocket.accept();

			// Producer ist ein ServiceProzess, der 
			// 1. von Clients Daten (int) erhält
			// 2. diese Daten in die fifo legt
			// 
			// telnet localhost 4444
			// 200
			// 1000
			// 300
			// 400
			// ...
			
			// Anmerkung: Diese zahlen werden vom Consumer für
			// das sleep verwendet. (zahl*10= Zeit in ms)
			Thread producer= new Producer(socket, fifo);
			producer.start();
		}

	}
}


FERTIG: ConsumerPanel.java
--------------------------------------------------------
import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GradientPaint;
import java.awt.Point;
import java.util.Deque;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.dial.ArcDialFrame;
import org.jfree.chart.plot.dial.DialBackground;
import org.jfree.chart.plot.dial.DialPlot;
import org.jfree.chart.plot.dial.DialPointer;
import org.jfree.chart.plot.dial.StandardDialScale;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.ui.GradientPaintTransformType;
import org.jfree.ui.StandardGradientPaintTransformer;


public class ConsumerPanel extends JPanel implements Observer, ChangeListener{
	/** The dataset. */
	DefaultValueDataset dataset;
	private JSlider slider;



	/**
	 * Creates a new demo panel.
	 */
	public ConsumerPanel() {
		super(new BorderLayout());

		// get data for diagrams
		this.dataset = new DefaultValueDataset(50);

		DialPlot plot = new DialPlot();
		plot.setView(0.21, 0.0, 0.58, 0.30);
		plot.setDataset(this.dataset);

		ArcDialFrame dialFrame = new ArcDialFrame(60.0, 60.0);
		dialFrame.setInnerRadius(0.60);
		dialFrame.setOuterRadius(0.90);
		dialFrame.setForegroundPaint(Color.darkGray);
		dialFrame.setStroke(new BasicStroke(3.0f));
		plot.setDialFrame(dialFrame);

		GradientPaint gp = new GradientPaint(new Point(),
				new Color(255, 255, 255), new Point(),
				new Color(240, 240, 240));
		DialBackground sdb = new DialBackground(gp);
		sdb.setGradientPaintTransformer(new StandardGradientPaintTransformer(
				GradientPaintTransformType.VERTICAL));
		plot.addLayer(sdb);

		StandardDialScale scale = new StandardDialScale(0, 100, 115.0,
				-50.0, 10.0, 4);
		scale.setTickRadius(0.88);
		scale.setTickLabelOffset(0.07);
		scale.setMajorTickIncrement(25.0);
		plot.addScale(0, scale);

		DialPointer needle = new DialPointer.Pin();
		needle.setRadius(0.82);
		plot.addLayer(needle);
		JFreeChart chart1 = new JFreeChart(plot);
		chart1.setTitle("Consumer");
		ChartPanel cp1 = new ChartPanel(chart1);

		cp1.setPreferredSize(new Dimension(400, 250));



		this.slider = new JSlider(0, 100);
		this.slider.setMajorTickSpacing(10);
		this.slider.setPaintLabels(true);
		this.slider.addChangeListener(this);

		add(cp1);
		add(this.slider, BorderLayout.SOUTH);
	}



    /**
     * Handle a change in the slider by updating the dataset value.  This
     * automatically triggers a chart repaint.
     *
     * @param e  the event.
     */
    public void stateChanged(ChangeEvent e) {
        this.dataset.setValue(new Integer(this.slider.getValue()));
    }





	// observer-pattern
	@Override
	public void update(Observable arg0, Object arg1) {
		this.dataset.setValue((Integer) arg1);

	}

}




FERTIG: RingSchlangePanel.java
-------------------------------------------------------------------------------
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;


public class RingSchlangePanel extends JPanel implements Observer{
	private JLabel[] left= new JLabel[10]; 
	private JLabel[] center= new JLabel[10]; 
	private JLabel[] right= new JLabel[10]; 

	private JLabel lbltitle;
	private JPanel contentPanel;


	/**
	 * Creates a new demo panel.
	 */
	public RingSchlangePanel() {

		super(new BorderLayout());

		// title
		lbltitle= new JLabel("Fifo");
		lbltitle.setHorizontalAlignment(SwingConstants.CENTER);
		lbltitle.setForeground(Color.BLACK);
		lbltitle.setFont(new Font("Lucida Grande", Font.PLAIN, 18));		
		add(lbltitle, BorderLayout.NORTH);

		// die Ringschlange anzeigen		
		contentPanel= new JPanel(new GridLayout(10,3));
		add(contentPanel, BorderLayout.CENTER);


		setPreferredSize(new Dimension(300, 250));

		for (int i = 0; i < 10; i++) {

			left[i]= new JLabel(String.valueOf(i));
			center[i]= new JLabel(String.valueOf(i));
			right[i]= new JLabel(String.valueOf(i));

			left[i].setOpaque(true);
			left[i].setHorizontalAlignment(SwingConstants.RIGHT);
			
			center[i].setOpaque(true);
			right[i].setOpaque(true);

			center[i].setForeground(Color.BLACK);
			center[i].setHorizontalAlignment(SwingConstants.CENTER);
			
			

			contentPanel.add(left[i]);
			contentPanel.add(center[i]);
			contentPanel.add(right[i]);			
		}
		
	}

	
	// Observer-pattern
	@Override
	public void update(Observable arg0, Object arg1) {
		RingSchlange model= (RingSchlange) arg0;
		
		// Daten holen
		String[] values= model.getValues();
		int front= model.getFront();
		int end= model.getEnd();
		
		// Daten anzeigen
		for (int i = 0; i < 10; i++) {
			left[i].setText("");
			right[i].setText("");
			left[i].setBackground(Color.white);
			right[i].setBackground(Color.white);

			center[i].setText(values[i]);
		}

		left[front].setText("front="+String.valueOf(front));
		right[end].setText("end=" + String.valueOf(end));
		left[front].setBackground(Color.green);
		right[end].setBackground(Color.red);

	}
}




Hinweis: WINDOWS und telnet
--------------------------------------------------------------------------
SYSTEMSTEUERUNG->PROGRAMME->WINDOWSFUNKTIONEN (DE)AKTIVIEREN->TELNET CLIENT aktivieren
