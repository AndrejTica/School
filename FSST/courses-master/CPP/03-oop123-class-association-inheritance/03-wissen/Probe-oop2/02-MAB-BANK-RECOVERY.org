* MAB-BANK-RECOVERY.org

- AUFGABE: Programmieren sie void Bank::recovery(string filename)


* Gegeben ist:

** das logfile: BANK_Hofmann-unlimited_2019-01-16_16-02.log

ADD:Anton Hofmann:100.00
ADD:Beta Hofmann:200.00
ADD:Gamma Hofmann:300.00
DEL:Anton Hofmann
ADD:Omega Hofmann:509.00
FORALL:PLUS:100.00
FORALL:MINUS:100.00
FORONE:Omega Hofmann:PLUS:1.00
FORONE:Omega Hofmann:MINUS:10.00


** Die Quellprogramme: main.cpp, bank.*, account.*

#+BEGIN_SRC cpp
// TODO: ENTER YOUR NAME
// main.cpp
// bank logging: recovery with logfile

#include <iostream>
using namespace std;

#include "bank.h"
 
int main(){
	Bank* myBank;
	myBank = new Bank("Hofmann-unlimited");
	myBank->setLogging(false);


	myBank->recovery("BANK_Hofmann-unlimited_2019-01-16_16-02.log");

	
	cout << myBank->getSumDeposits() <<endl;

	delete myBank;

	return 0;
}

/*
output should be:
1000.00
*/
#+END_SRC


* AUFGABE: Programmieren void Bank::recovery(string filename)

Programmieren Sie void Bank::recovery(string filename)


** Hint: split
#+BEGIN_SRC cpp
string s="ABC:123:def";
	string split;

	istringstream is(s);
	getline(is, split, ':');
	cout << split;

	getline(is, split, ':');
	cout << split;

	getline(is, split, ':');
	cout << split;
#+END_SRC


** Hint: Filehandling
#+BEGIN_SRC cpp

	/**
	* http://www.cplusplus.com/reference/ios/ios/exceptions/
	* Get/set exceptions mask
	*/

	// ios::exceptions
	#include <iostream>     // std::cerr
	#include <fstream>      // std::ifstream

	using namespace std;

	int main () {
		std::ifstream file;
		string sinput;

		// set exception mask
		file.exceptions ( std::ifstream::failbit | std::ifstream::badbit );

		try {
			file.open ("test.txt");


			// zeilenweise lesen mit: std::getline
			while (std::getline(file, sinput, '\n')) {
				cout << sinput << endl;
			}

			file.close();
		}
		catch (std::ifstream::failure e) {
			std::cerr << "Exception opening/reading/closing file\n";
		}
		return 0;
	}
#+END_SRC
