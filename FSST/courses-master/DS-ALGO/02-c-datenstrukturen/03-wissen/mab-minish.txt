mab: minish/listen
----------------------------------------------------------


1. INSERTFIRST  /* -- Am Beginn der Liste eintragen */
-----------------------------------------------------------------------------
	SLIST *insertFirst(SLIST_HEADER* aList, char* userData) {
	SLIST *newPtr;
	if ((newPtr= makeSListNode(userData, aList->First))!= NULL) {

	  aList->First= ________________________;

	  if (aList->Len == ______________________)  /* -- erster Eintrag ? */

		aList->Last= _______________________;

	  aList->Len++;
	}
	return ___________________________;
	}


2. LIST2ARRAY  /* -- LISTENDATEN IN EIN ARRAY SCHREIBEN */
-----------------------------------------------------------------------------
	Erstelle die Funktion:

	char* list2array(SLIST_HEADER* aList);
		1. ermittelt die Länge aller Strings, die in der Liste gespeichert sind
		2. alloziiert einen Speicher, sodass die Strings inkl. den
			Begrenzungszeichen < und > Platz haben. (s. Punkt 3)
		3. speichert alle Strings in den neuen Speicher in der folgenden
			Form: <string1><string2><string3>......<string9>
		4. gibt die Adresse des Speichers zurück.

		5. Teste das Programm mit dem folg. Code.

#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>

#include "o_strlist.h"


int main(){
	char* array;	
	SLIST_HEADER * cmdSList;    /* History Liste                  */	
	
	/* --------------------------------------------
	* Liste zur Speicherung der Kommandos erzeugen
	* --------------------------------------------*/
	cmdSList= createSList();
	if (cmdSList == (SLIST_HEADER *) NULL){
		fprintf(stderr,"Not enough memory\n");
		exit(1);
	}
	
	insertLast(cmdSList, "ps");
	insertLast(cmdSList, "kill");
	insertLast(cmdSList, "who");

	array= list2array(cmdSList);
	printf("Alle Strings in der Liste: %s\n" , array);

	free(array);
	rm_SList(cmdSList);

	return 0;
}

	

