* howto-cmake
- http://derekmolloy.ie/hello-world-introductions-to-cmake/



* Example 1: hello

#+begin_src bash
cd ~/ws-HOWTO-cmake
mkdir hello
cd hello


- nano helloworld.cpp

#include <iostream>
int main(int argc, char *argv[]){
   std::cout << "hello, world!"<< std::endl;
   return 0;
}


- nano CMakeLists.txt

cmake_minimum_required(VERSION 2.8.9)
project (hello)
add_executable(hello helloworld.cpp)


- cmake .
- make
- ./hello

- make clean
#+end_src


* Example 2: A Project with Directories

#+begin_src bash
cd ~/ws-HOWTO-cmake
mkdir student 
mkdir student/build
mkdir student/include
mkdir student/src
cd student


 |-- CMakeLists.txt
 |-- build
 |-- include
 |   \-- Student.h
 \-- src
     |-- Student.cpp
     \-- mainapp.cpp


- nano CMakeLists.txt

cmake_minimum_required(VERSION 2.8.9)
project(student)

#Bring the headers, such as Student.h into the project
include_directories(include)

#Can manually add the sources using the set command as follows:
#set(SOURCES src/mainapp.cpp src/Student.cpp)

#However, the file(GLOB...) allows for wildcard additions:
file(GLOB SOURCES "src/*.cpp")

add_executable(testStudent ${SOURCES})



- nano include/Student.h

#pragma once
#include <iostream>
#include <string>
using namespace std;

class Student{
	private: string name;
	public: 
		Student (string name);
		void display();
};



- nano src/Student.cpp

#include "Student.h"
#include <iostream>
#include <string>
using namespace std;
Student::Student (string name){
	this->name= name;
}
void Student::display(){
	cout << name << endl;
}



- nano src/mainapp.cpp

#include"Student.h"

int main(int argc, char *argv[]){
   Student s("Joe");
   s.display();
   return 0;
}



- cd build
- cmake ..
- make
- ./testStudent
- make clean
#+end_src

* Example 3: Building a Shared Library (.so)

#+begin_src 
cd ~/ws-HOWTO-cmake
mkdir studentlib_shared
mkdir studentlib_shared/build
mkdir studentlib_shared/include
mkdir studentlib_shared/src
cd studentlib_shared 


cp ../student/include/Student.h include
cp ../student/src/Student.cpp src


 studentlib_shared/
 |-- CMakeLists.txt
 |-- build
 |-- include
 |   \-- Student.h
 \-- src
 .   \-- Student.cpp




- nano CMakeLists.txt

cmake_minimum_required(VERSION 2.8.9)
project(studentlib_shared)
set(CMAKE_BUILD_TYPE Release)

#Bring the headers, such as Student.h into the project
include_directories(include)

#However, the file(GLOB...) allows for wildcard additions:
file(GLOB SOURCES "src/*.cpp")

#Generate the shared library from the sources
add_library(testStudent SHARED ${SOURCES})

#Set the location for library installation -- i.e., /usr/lib in this case
# not really necessary in this example. Use "sudo make install" to apply
install(TARGETS testStudent DESTINATION /usr/lib)


- cd build
- cmake .
- make
- ls -l
- ldd libtestStudent.so

- sudo make install
- ls -l /usr/lib/|grep libtest*



- sudo make uninstall
- make clean
#+end_src


* Example 4: Building a Static Library (.a)

#+begin_src 

cd ~/ws-HOWTO-cmake
mkdir studentlib_static
mkdir studentlib_static/build
mkdir studentlib_static/include
mkdir studentlib_static/src
cd studentlib_static


cp ../student/include/Student.h include
cp ../student/src/Student.cpp src



 studentlib_static/
 |-- CMakeLists.txt
 |-- build
 |-- include
 |   \-- Student.h
 \-- src
 .   \-- Student.cpp



- nano CMakeLists.txt

cmake_minimum_required(VERSION 2.8.9)
project(studentlib_static)
set(CMAKE_BUILD_TYPE Release)

#Bring the headers, such as Student.h into the project
include_directories(include)

#However, the file(GLOB...) allows for wildcard additions:
file(GLOB SOURCES "src/*.cpp")

#Generate the static library from the sources
add_library(testStudent STATIC ${SOURCES})

#Set the location for library installation -- i.e., /usr/lib in this case
# not really necessary in this example. Use "sudo make install" to apply
install(TARGETS testStudent DESTINATION /usr/lib)



- cd build
- cmake ..
- make
- ls -l

- ar -t libtestStudent.a

- sudo make install



- sudo make uninstall
- sudo make clean

#+end_src

* Example 5: Using a Shared or Static Library

#+begin_src 

cd ~/ws-HOWTO-cmake
mkdir TestLibrary
cd TestLibrary


- nano CMakeLists.txt

cmake_minimum_required(VERSION 2.8.9)
project (TestLibrary)

#For the shared library:
set ( PROJECT_LINK_LIBS libtestStudent.so )
link_directories( ~/ws-HOWTO-cmake/studentlib_shared/build )

#For the static library:
#set ( PROJECT_LINK_LIBS libtestStudent.a )
#link_directories( ~/ws-HOWTO-cmake/studentlib_static/build )

include_directories(~/ws-HOWTO-cmake/studentlib_shared/include)

add_executable(libtest libtest.cpp)
target_link_libraries(libtest ${PROJECT_LINK_LIBS} )



- nano libtest.cpp

#include"Student.h"

int main(int argc, char *argv[]){
   Student s("Joe");
   s.display();
   return 0;
}


- cmake .
- make
- ./libtest
#+end_src
