mab-designpattern
-----------------------------------------------------------------------------------------

1. BEOBACHTER-MUSTER (java)
-----------------------------------------------------------------------------------------
PROJEKT: BEOBACHTER-MUSTER	Hinweis: siehe: ../01-lernen/designpattern.odt
Aufgabe: 
a) Bringen Sie das folgende Programm zum Laufen und 
b) erstellen Sie ein vollständiges Klassendiagramm.

	Gegeben sind folg. Klassen
	// DemoObserver
	public class DemoObserver {
		public static void main(String[] args) {
		   Beobachter[] polizisten = {new Beobachter(), new Beobachter(), 
		   								new Beobachter()};
		   Beobachtbarer person = new Beobachtbarer();
	
		   for (Beobachter b: java.util.Arrays.asList(polizisten)) {
			 person.addObserver(b);
		   }
		   person.setText("Ich");
		   person.setText("werde");
		   person.setText("beobachtet.");
		}
	}
	
	// Beobachter
	import java.util.Observable;
	import java.util.Observer;
	
	public class Beobachter implements Observer {
	 private static int NR = 1;
	 private int nr;
	 
	 public Beobachter() {
	   this.nr = Beobachter.NR++;
	 }
	 
	 public void ?????????????????(Observable beobachtbarer, Object text) {
	   System.out.println("Beobachter " + nr + " meldet: Text=" + text);
	 }
	}
	
	// Beobachtbarer
	import java.util.Observable;
	import java.util.Observer;
	
	public class Beobachtbarer extends Observable {
	 private String text;	 
	 public Beobachtbarer() {
	   super();
	 }
	 
	 public void setText(String text) {
	   this.text = text;
	   super.?????????????(); // Markierung, daß sich der Text geändert hat
	   super.????????????????????(text); // ruft für alle Beobachter die ?-Methode auf
	 }
	 
	 public String getText() {
	   return text;
	 }
	}