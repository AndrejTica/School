/* soapCalculatorPortBindingProxy.h
   Generated by gSOAP 2.8.16 from soap/calc.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapCalculatorPortBindingProxy_H
#define soapCalculatorPortBindingProxy_H
#include "soapH.h"

class SOAP_CMAC CalculatorPortBindingProxy : public soap
{ public:
	/// Endpoint URL of service 'CalculatorPortBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	CalculatorPortBindingProxy();
	/// Construct from another engine state
	CalculatorPortBindingProxy(const struct soap&);
	/// Constructor with endpoint URL
	CalculatorPortBindingProxy(const char *url);
	/// Constructor with engine input+output mode control
	CalculatorPortBindingProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	CalculatorPortBindingProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	CalculatorPortBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~CalculatorPortBindingProxy();
	/// Initializer used by constructors
	virtual	void CalculatorPortBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'mul' (returns error code or SOAP_OK)
	virtual	int mul(int _arg0, int _arg1, struct ns1__mulResponse &_param_1) { return this->mul(NULL, NULL, _arg0, _arg1, _param_1); }
	virtual	int mul(const char *endpoint, const char *soap_action, int _arg0, int _arg1, struct ns1__mulResponse &_param_1);

	/// Web service operation 'dic' (returns error code or SOAP_OK)
	virtual	int dic(int _arg0, int _arg1, struct ns1__dicResponse &_param_2) { return this->dic(NULL, NULL, _arg0, _arg1, _param_2); }
	virtual	int dic(const char *endpoint, const char *soap_action, int _arg0, int _arg1, struct ns1__dicResponse &_param_2);

	/// Web service operation 'add' (returns error code or SOAP_OK)
	virtual	int add(int _arg0, int _arg1, struct ns1__addResponse &_param_3) { return this->add(NULL, NULL, _arg0, _arg1, _param_3); }
	virtual	int add(const char *endpoint, const char *soap_action, int _arg0, int _arg1, struct ns1__addResponse &_param_3);

	/// Web service operation 'min' (returns error code or SOAP_OK)
	virtual	int min(int _arg0, int _arg1, struct ns1__minResponse &_param_4) { return this->min(NULL, NULL, _arg0, _arg1, _param_4); }
	virtual	int min(const char *endpoint, const char *soap_action, int _arg0, int _arg1, struct ns1__minResponse &_param_4);
};
#endif
